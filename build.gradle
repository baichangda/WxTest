//所有模块配置
allprojects{
    group 'com.bcd'
    version '1.0-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    //加入maven发布依赖
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
//        jcenter()
//        mavenCentral()
    }

    //下载源码和文档
    //gradle cleanIdea idea
    idea {
        module {
            downloadSources=true
//            downloadJavadoc=true
        }
    }
    dependencies{
        //springboot websocket支持
        compile("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
        //shiro权限框架集成
        compile("org.apache.shiro:shiro-spring:${shiroVersion}")
        compile("org.apache.shiro:shiro-ehcache:${shiroVersion}")
    }

    compileJava{
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-parameters"
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xdiags:verbose"
    }

    compileTestJava{
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-parameters"
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xdiags:verbose"
    }

    jar {
        enabled = true
    }

    /**
     * SpringBoot 2开始,使用gradle bootJar进行打包,并要配置入口类
     */
    bootJar {
        manifest {
            attributes 'Start-Class': 'com.bcd.Application'
        }
    }

    //生成jar时打包源码
    task sourceJar(type: Jar) {
        from sourceSets.main.java.srcDirs
        classifier "sources"
    }

    //发布到本地MAVEN仓库使用 gradle PublishToMavenLocal
    //发布到远程MAVEN仓库使用 gradle publishMavenPublicationToMavenRepository
    publishing{
        publications {
            maven(MavenPublication){
                from components.java
                artifact(sourceJar)
            }
        }
        repositories {
            maven{
                url 'https://repository.incarcloud.com/content/repositories/snapshots/'
                credentials {
                    username 'deployment'
                    password 'deploy123456'
                }
            }
        }
    }

}






bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    if (project.hasProperty('jvmArgs') ) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
    //开启缓存行补齐
    jvmArgs('-XX:-RestrictContended')
}

buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
        shiroVersion='1.4.1'
        mavenRepoUrl='https://maven.aliyun.com/repository/central'

    }

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
//        jcenter()
//        mavenCentral()
    }

    dependencies {
        //使用springboot框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

dependencies {
    compile project(':Sys')
    compile project(':Wx')
}
